#include "Utils.h"
#include <fstream>
#include <iostream>
#include <string>
#include <sstream>
#include <stdlib.h>
#include <stdexcept>

#include "rapidxml.hpp"
using namespace rapidxml;

namespace Siggen
{

template<class PointType>
Field<PointType>::Field():
imp_position(0),
grad_position(0),
interp()
{};

template<class PointType>
void Field<PointType>::set_grid(int rlen_in, int zlen_in, int philen_in, int implen_in, int gradlen_in,
                                float rstep_in, float zstep_in, float phistep_in, float impstep_in, float gradstep_in,
                                float rmin_in, float zmin_in, float phimin_in, float impmin_in, float gradmin_in
                              )
{
  rlen = rlen_in;
  zlen = zlen_in;
  philen = philen_in;
  rstep = rstep_in;
  zstep = zstep_in;
  phistep = phistep_in;
  rmin= rmin_in;
  zmin = zmin_in;
  phimin = phimin_in;

  implen = implen_in;
  gradlen = gradlen_in;
  impstep = impstep_in;
  gradstep = gradstep_in;
  impmin = impmin_in;
  gradmin = gradmin_in;

  // field_data.resize(rlen*zlen*philen*implen*gradlen);
}

template<class PointType>
void Field<PointType>::set_grid(int rlen_in, int zlen_in, int philen_in,
                                float rstep_in, float zstep_in, float phistep_in,
                                float rmin_in, float zmin_in, float phimin_in
                              )
{
  set_grid(rlen_in, zlen_in, philen_in, 1,1,
           rstep_in, zstep_in, phistep_in,1,1,
           rmin_in, zmin_in, phimin_in,0,0);
}


/*For 2D fields */
template<class PointType>
void Field<PointType>::set_grid(int rlen_in, int zlen_in, float rstep_in, float zstep_in, float rmin_in, float zmin_in)
{
  set_grid(rlen_in, zlen_in, 1, rstep_in, zstep_in, 1, rmin_in, zmin_in, 0);
}

template<class PointType>
template<class GeometryType>
int Field<PointType>::read_data(std::string file_name,  GeometryType& geom){

  std::string file_ext = file_name.substr(file_name.find_last_of(".") + 1);

  if(file_ext == "dat") {
    return read_text_data(file_name, geom);
  } else if (file_ext == "field"){
    return read_binary_data(file_name, geom);
  } else{
    std::cout << "\nField file extension must be either .dat (for text) or .field (for binary): " << file_name << "\n";
    return 1;
  }
}

template<class PointType>
template<class GeometryType>
int Field<PointType>::read_binary_data(std::string file_name,  GeometryType& geom){
  //Currently only works for 2D data
  std::ifstream is;
  int ir, iz,iimp,igrad,iphi;
  cyl_pt cyl;
  point cart;

  std::cout << "\nReading field data from file: " << file_name << "...\n";
  is.open(file_name.c_str(), std::ios::binary);

  //Starts with an xml header:
  unsigned int header_len;
  is.read((char*)&header_len, 4);

  std::vector<char> buffer;
  buffer.resize(header_len);
  is.read(&buffer[0], header_len);
  buffer.push_back('\0');

  //Parse the header using the rapidxml library
  xml_document<> doc;
  xml_node<>* root_node;

  doc.parse<0>(&buffer[0]);
  // Find our root node
  root_node = doc.first_node("field");

  float min;
  float max;
  int num;

  for (xml_node<>* variable_node = root_node->first_node("variable"); variable_node; variable_node = variable_node->next_sibling())
  {
      min = atof( variable_node->first_node("min")->value());
      max = atof( variable_node->first_node("max")->value());
      num = atoi( variable_node->first_node("num")->value());

      if (strcmp (variable_node->first_attribute("name")->value(),"radialDimension") == 0){
        rmin = min;
        rlen = num;
        rstep = (num > 1) ? (max-min)/(num-1) : 0;
        std::cout << "-->rmin: " << rmin << ", rlen: " << rlen << ", rstep: "<< rstep << "\n";
      }
      else if (strcmp (variable_node->first_attribute("name")->value(),"axialDimension") == 0){
        zmin = min;
        zlen = num;
        zstep = (num > 1) ? (max-min)/(num-1) : 0;
        std::cout << "-->zmin: " << zmin << ", zlen: " << zlen << ", zstep: "<< zstep << "\n";
      }
      else if (strcmp (variable_node->first_attribute("name")->value(),"impurity_avg") == 0){
        impmin = min;
        implen = num;
        impstep = (num > 1) ? (max-min)/(num-1) : 0;
        std::cout << "-->impmin: " << impmin << ", implen: " << implen << ", impstep: "<< impstep << "\n";
      }
      else if (strcmp (variable_node->first_attribute("name")->value(),"impurity_grad") == 0){
        gradmin = min;
        gradlen = num;
        gradstep = (num > 1) ? (max-min)/(num-1) : 0;
        std::cout << "-->gradmin: " << gradmin << ", gradlen: " << gradlen << ", gradstep: "<< gradstep << "\n";
      }
  }

  //Now resize the field data accordingly
  field_data.resize(rlen*zlen*philen*implen*gradlen);

  int count = 0;
  PointType junk;

  while (!is.eof()){
    if (count >= field_data.size()){
      is.read((char *) &junk, sizeof(junk));
      count++;
      continue;
    }

    //find the (r,z) corresponding to this point

    igrad = count % (gradlen);
    iimp = ((count - igrad) / gradlen) % implen ;
    iz = ((count - iimp*gradlen - igrad) / (gradlen*implen)) % zlen ;
    iphi = ((count - iz*gradlen*implen - iimp*gradlen - igrad) / (zlen*gradlen*implen)) % philen ;
    ir = ((count - iphi*zlen*gradlen*implen -iz*gradlen*implen - iimp*gradlen - igrad) /
          (philen*zlen*gradlen*implen)) % rlen ;

    cyl.r = rmin + ir*rstep;
    cyl.z = zmin + iz*zstep;
    cyl.phi = 0;
    cart = cyl_to_cart(cyl);

    if (geom.outside_detector(cart)){
      is.read((char *) &junk, sizeof(junk));
      // field_data.at(count) = 0.;
      // std::cout << "r: " << cyl.r << ", z: " << cyl.z << ": " << field_data.at(count) << std::endl;
      count++;
      continue;
    }

    is.read((char *) &get_point(ir,iphi,iz,iimp,igrad), sizeof(get_point(ir,0,iz,iimp,igrad)));
    // std::cout << "r: " << cyl.r << ", z: " << cyl.z << ": " << field_data.at(count) << std::endl;

    count++;
  }
  //You end up with one extra because of the dumb loop I wrote
  count--;

  if (count != rlen*zlen*philen*implen*gradlen) {
    error("number of points read (%d) != expected (%d*%d*%d*%d*%d)\n",
    count, rlen, zlen, philen, implen, gradlen);
    return 1;
  }
  std::cout << "done successfully!\n";
  return 0;
}

template<class PointType>
template<class GeometryType>
int Field<PointType>::read_text_data(std::string file_name,  GeometryType& geom){

  field_data.resize(rlen*zlen*philen*implen*gradlen);

  int lineno=0, npts=0;
  std::string line;

  std::ifstream file(file_name.c_str());
  if(!file){
    std::cout <<"\nERROR: failed to open electric field table: " << file_name << "\n";
    return 1;
  }
  std::cout << "\nReading field data from file: " << file_name << "\n";

  while(getline(file, line))
  {
    lineno++;
    PointType point_data;
    cyl_pt  cyl;
    point cart;
    int i,j,k=0;

    // ignore comments and blank lines
    if (line.length() <3 || line.find_first_not_of(' ') == line.npos || line[0] == '#') continue;

    std::stringstream line_stream(line);

    //pull in position: r,z for 2d, r,phi,z for 3d
    if (philen == 1){ // 2D for sure (could make this explicit somwhere...)
      line_stream >> cyl.r >> cyl.z;
      cyl.phi=0;
    }else{ // 3D
      line_stream >> cyl.r >> cyl.phi >> cyl.z;
    }

    //parse the point parameters (ie, EField or WP)
    line_stream >> point_data;

    if (line_stream.fail()){
      error("failed to read electric field data from line no %d\n"
      "of file %s\n", lineno, file_name.c_str());
      return 1;
    }

    npts++;
    cyl.phi /= 180.0/3.14159265;  // degrees to radians
    i = 0.5 + (cyl.r - rmin)/rstep; // round up
    j = 0.5 + (cyl.z - zmin)/zstep;
    if (philen>1) k = 0.5 + (cyl.phi - phimin)/phistep;

    if (i < 0 || i >= rlen || j < 0 || j >= zlen || k < 0 || k >= philen ){
      continue;
    }

    cart = cyl_to_cart(cyl);
    if (geom.outside_detector(cart)) continue;

    get_point(i,k,j) = point_data;
  }

  //for 3d, copy min phi value over to maxvalue (cause its a circle)
  int philen_idx = philen;
  if (philen_idx >1){
    --philen_idx;
    for (int i=0; i<rlen; i++) {
      for (int j=0; j<zlen; j++) {
      get_point(i, philen-1, j) = get_point(i,0,j);
      }
    }
  }

  if (npts != rlen*zlen*philen_idx) {
    error("number of points read (%d) != expected (%d*%d*%d)\n",
	  npts, rlen, zlen, philen_idx);
    return 1;
  }

  // TELL_CHATTY(
  //      "i, j, rlen, zlen, npts: %d %d %d %d %d %d\n", i, j, rlen, zlen, philen, npts);
  TELL_NORMAL( "Done reading %d lines of field data\n", lineno);
  return 0;

}

/*find existing integer field grid index closest to pt*/
/* added DCR */
template<class PointType>
template<class GeometryType>
int Field<PointType>::nearest_field_grid_index(cyl_pt pt, cyl_int_pt *ipt, GeometryType& geometry){
  /* returns <0 if outside crystal or too far from a valid grid point
              0 if interpolation is okay
              1 if we can find a point but extrapolation is needed
  */
  cyl_pt new_pt;
  int r, z;
  float d[3] = {0.0, -1.0, 1.0};
  point cart;

  if (last_ret != -99 && pt.r == last_pt.r && pt.z == last_pt.z && pt.phi == last_pt.phi) {
    *ipt = last_ipt;
    return last_ret;
  }
  last_pt = pt;
  last_ret = -2;

  cart = cyl_to_cart(pt);
  if (geometry.outside_detector(cart) == 1) {
    last_ret = -1;
  } else{
    new_pt.phi = pt.phi;
    for (z=0; z<3; z++) {
      new_pt.z = pt.z + d[z]*zstep;
      for (r=0; r<3; r++) {
        new_pt.r = pt.r + d[r]*rstep;
        if (geometry.efield_exists(new_pt)) {
          *ipt = last_ipt = field_grid_index(new_pt);
          if (r == 0 && z == 0) {
            last_ret = 0;
          } else {
            last_ret = 1;
          }
          return last_ret;
        }
      }
    }
  }

  return last_ret;
}

template<class PointType>
template<class GeometryType>
int Field<PointType>::field_exists(cyl_pt pt, GeometryType& geometry){
  int flag;
  char ptstr[MAX_LINE];
  int i, j;
  int ir, iz;
  cyl_int_pt ipt;
  point cart;

  sprintf(ptstr, "(%.1f,%.1f %.1f)", pt.r, pt.phi, pt.z);
  cart = cyl_to_cart(pt);

  flag = geometry.outside_detector(cart);
  if (flag == 1){
    TELL_CHATTY( "point %s is outside crystal\n", ptstr);
    return 0;
  }else{
    TELL_CHATTY( "point %s is in crystal\n", ptstr);
  }
  ipt = field_grid_index(pt);

  if (ipt.r < 0 || ipt.r + 1 >= rlen ||
      ipt.z < 0 || ipt.z + 1 >= zlen){
    TELL_CHATTY( "point %s is outside wp table\n", ptstr);
    return 0;
  }
  for (i = 0; i < 2 ; i++){
    ir = ipt.r + i;
    for (j = 0; j < 2; j++){
      iz = ipt.z + j;
      try{
        if ((*this)(ir,iz) == 0.0f ) {
        	TELL_CHATTY( "point %s has no field\n", ptstr);
        	return 0;
        }
      }catch(const std::out_of_range& oor){
        printf("caught vector error in field exists...\n");
        printf("ir %d, rlen %d, iz %d, zlen %d\n", ir, rlen, iz, zlen );
      }
    }
  }
  return 1;
}

/*find integer field _ index corresponding to pt*/
template<class PointType>
cyl_int_pt Field<PointType>::field_grid_index(cyl_pt pt){
  cyl_int_pt ipt;

  ipt.r = (pt.r - rmin)/rstep;
  ipt.phi = (pt.phi - phimin)/phistep;
  ipt.z = (pt.z - zmin)/zstep;
  return ipt;
}


/* Find weights for 8 voxel corner points around pt for e/wp field*/
/* DCR: modified to work for both interpolation and extrapolation */
template<class PointType>
void Field<PointType>::position_weights(cyl_pt pt, cyl_int_pt ipt, float out[2][2][2]){
  float r, z, phi;
  r = (pt.r - rmin)/rstep - ipt.r;
  z = (pt.z - zmin)/zstep - ipt.z;
  phi = (pt.phi - phimin)/phistep - ipt.phi;

  interp.trilinear_interpolate(r,phi,z,out);
}

template<class PointType>
void Field<PointType>::interp_position2D(cyl_pt pt, cyl_int_pt ipt, PointType& d){
  int i,j;
  float r, z, w[2][2];
  PointType d_ref;

  r = (pt.r - rmin)/rstep - ipt.r;
  z = (pt.z - zmin)/zstep - ipt.z;
  interp.bilinear_interpolate(r,z,w);

  for (i = 0; i < 2; i++){
    for (j = 0; j < 2; j++){
      d_ref = get_point( ipt.r + i, 0, ipt.z +j);
      d += d_ref*(w[i][j]);
    }
  }
}

template<class PointType>
void Field<PointType>::interp_impurity(cyl_pt pt, cyl_int_pt ipt, float imp_z0, float imp_grad, PointType& d){
  int  i_imp, i_grad,i,j;
  float imp, grad, w[2][2];
  PointType d_ref;

  if ((imp_grad < gradmin) || (imp_grad > gradmin + gradstep*(gradlen-1) )){
    std::cout << "ERROR: grad "<< imp_grad <<" must be between " <<gradmin << " and " << gradmin + gradstep*(gradlen-1) <<"\n";
  }
  if ((imp_z0 < impmin) || (imp_z0 > impmin + impstep*(implen-1))){
    std::cout << "ERROR: impurity "<< imp_z0 <<" must be between " <<impmin << " and " << impmin + impstep*(implen-1) <<"\n";
  }

  i_imp = ( imp_z0 - impmin )/ impstep ;
  i_grad = ( imp_grad - gradmin  )/ gradstep  ;

  imp = (imp_z0 - impmin)/impstep - i_imp;
  grad = (imp_grad- gradmin)/gradstep - i_grad;

  interp.bilinear_interpolate(imp,grad,w);

  // std::cout <<"imp_avg: " << imp_z0 <<"\n";
  // std::cout <<"impmin: " << impmin <<"\n";
  // std::cout <<"impstep: " << impstep <<"\n";
  // std::cout <<"imp: " << imp <<"\n";
  // std::cout <<"i_imp: " << i_imp <<"\n";
  //
  // std::cout <<"imp_grad: " << imp_grad <<"\n";
  // std::cout <<"gradmin: " << gradmin <<"\n";
  // std::cout <<"gradstep: " << gradstep <<"\n";
  // std::cout <<"i_grad: " << i_grad <<"\n";
  // std::cout <<"grad: " << grad <<"\n";
  //
  // std::cout << "start: " << d << "\n";
  for (i = 0; i < 2; i++){
    for (j = 0; j < 2; j++){
      //I think I'd rather the get_point just operated with a given i_grad and i_imp
      d_ref = 0;
      imp_position = i_imp + i;
      grad_position = i_grad + j;

      interp_position2D(pt, ipt, d_ref);
      d += d_ref*(w[i][j]);
      // std::cout << "  imp_position: " << imp_position <<", grad_position: " << grad_position << "\n";
      // std::cout << "  i: " << i <<", j: "<< j <<", w: "<<  w[i][j] << "\n";
      // std::cout << "  d:" << d << "\n";
    }
  }
}

// template<class PointType>
// PointType Field<PointType>::interp_position3D(cyl_pt pt, cyl_int_pt ipt, PointType& d){
//   int i,j,k;
//   float r, z, w[2][2][2];
//   PointType d_ref;
//
//   r = (pt.r - rmin)/rstep - ipt.r;
//   z = (pt.z - zmin)/zstep - ipt.z;
//   bilinear_interpolate(r,z,w);
//
//   for (i = 0; i < 2; i++){
//     for (j = 0; j < 2; j++){
//       d_ref = get_point( ipt.r + i, 0, ipt.z +j)
//       d += d_ref*(w[i][j]+w[i][j]); // ignore angle, no dependence
//     }
//   }
//   return d;
// }


template<class PointType>
PointType& Field<PointType>::operator()(int ir, int iz){
  if (philen > 1){
    error("Reading 3D Field as a 2D field\n");
  }
  if (ir>=rlen || iz>=zlen){
    std::cout << "ERROR: accessing point beyond field grid.\n";
    std::cout << "--> ir:   " << ir << " (rlen " << rlen <<")\n";
    std::cout << "--> iz:   " << iz << " (zlen " << zlen <<")\n";
    exit(0);
  }

  // assume iphi = 0
  try{
    return this->get_point(ir, 0, iz);
  } catch(const std::out_of_range& oor){
    std::cout << "Error in field:  accessing (" << ir << "," <<iz <<")\n";
    std::cout << "-->rlen: "<<rlen<<", zlen: " << zlen <<std::endl;
    exit(0);
  }
}

template<class PointType>
PointType& Field<PointType>::operator()(int ir, int iphi, int iz){
  return this->get_point(ir, iphi, iz);
  // return field_data.at(ir * philen * zlen + iz*philen +iphi);
}

template<class PointType>
PointType& Field<PointType>::get_point(int ir, int iphi, int iz, int iimp, int igrad){
  imp_position = iimp;
  grad_position = igrad;
  return get_point(ir,iphi,iz);
}

template<class PointType>
PointType& Field<PointType>::get_point(int ir, int iphi, int iz){
  if (ir>=rlen || iphi >=philen || iz>=zlen || imp_position > implen || grad_position > gradlen){
    std::cout << "ERROR: accessing point beyond field grid.\n";
    std::cout << "--> ir:   " << ir << " (rlen " << rlen <<")\n";
    std::cout << "--> iphi: " << iphi << " (philen " << philen <<")\n";
    std::cout << "--> iz:   " << iz << " (zlen " << zlen <<")\n";
    std::cout << "--> imp_position:   " << imp_position << " (implen " << implen <<")\n";
    std::cout << "--> grad_position:   " << grad_position << " (gradlen " << gradlen <<")\n";
    exit(0);
  }

  try{
    return field_data.at(ir * philen * zlen * implen*gradlen
                         + iz*philen*implen*gradlen
                         + iphi * implen*gradlen
                         + imp_position*gradlen
                         + grad_position
                        );
  }catch(const std::out_of_range& oor){
    std::cout << "caught vector error in get_point...\n";
    std::cout << "--> ir:   " << ir << " (rlen " << rlen <<")\n";
    std::cout << "--> iphi: " << iphi << " (philen " << philen <<")\n";
    std::cout << "--> iz:   " << iz << " (zlen " << zlen <<")\n";
    std::cout << "--> imp_position:   " << imp_position << " (implen " << implen <<")\n";
    std::cout << "--> grad_position:   " << grad_position << " (gradlen " << gradlen <<")\n";
    exit(0);
  }
}

/* This is 2D-only for now, because For 3D (ie, segmented...) fields,
   we generally want to be able to re-use ipt and intepolation data  */
template<class PointType>
template<class GeometryType>
int Field<PointType>::get_point_interp(cyl_pt cyl, float imp_z0, float imp_grad, PointType& data, GeometryType& geometry){
  if (philen > 1){
    error("Reading 3D Field as a 2D field: get_point_interp only supported for 2D fields\n");
  }
  int    res;
  cyl_int_pt ipt;

  res = nearest_field_grid_index(cyl, &ipt, geometry);
  if (res < 0) return -1;

  if (implen == 1) interp_position2D(cyl, ipt, data);
  else interp_impurity(cyl, ipt, imp_z0, imp_grad, data);
  // std::cout << "average imp: " <<  imp_z0 <<std::endl;
  return 0;
}

template<class PointType>
template<class GeometryType>
int Field<PointType>::get_point_interp(cyl_pt cyl,  PointType& data, GeometryType& geometry){
  if (philen > 1){
    error("Reading 3D Field as a 2D field: get_point_interp only supported for 2D fields\n");
  }
  int    res;
  cyl_int_pt ipt;

  res = nearest_field_grid_index(cyl, &ipt, geometry);
  if (res < 0) return -1;

  interp_position2D(cyl, ipt, data);

  return 0;
}


} // namespace Siggen
